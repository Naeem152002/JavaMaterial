package com.services;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.dto.UserDto;
import com.entities.Rating;
import com.entities.User;
import com.excetpions.ResourceNotFoundException;
import com.repo.UserRepo;


@Service
public class UserServiceImpl implements UserService{
	

	@Autowired
	private UserRepo userRepo;
	@Autowired
	private RestTemplate restTemplate;
	

	private Logger logger=LoggerFactory.getLogger(UserServiceImpl.class);
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Override
	public UserDto saveUser(UserDto userDto) {
		User user=modelMapper.map(userDto, User.class);
		User save=userRepo.save(user);
		ArrayList<Rating> ratingsOfUser=restTemplate.getForObject("http://localhost:8086/api/ratings/users/"+save.getUserId(),ArrayList.class);
	     logger.info("{}",ratingsOfUser);
	     save.setRatings(ratingsOfUser);
		return modelMapper.map(save, UserDto.class);
	}



	@Override
	public UserDto updateUser(UserDto userDto, int userId) {
		User u=userRepo.findById(userId).orElseThrow(()->new ResourceNotFoundException("User with given id is not found on server!!"+userId) );
		u.setName(userDto.getName());
		u.setEmail(u.getEmail());
		u.setAbout(userDto.getAbout());
		List<Rating> ratingsOfUser=restTemplate.getForObject("http://localhost:8086/api/ratings/users/"+u.getUserId(),List.class);
	     logger.info("{}",ratingsOfUser);
	     u.setRatings(ratingsOfUser);
		User user=userRepo.save(u);
		return modelMapper.map(user, UserDto.class);
	}



	@Override
	public void deleteUser(int userId) {
		User u=userRepo.findById(userId).orElseThrow(()->new ResourceNotFoundException("User with given id is not found on server!!"+userId) );
		userRepo.delete(u);
	}

	@Override
	public UserDto getSingleUser(int userId) { 
	User user=userRepo.findById(userId).orElseThrow(()->new ResourceNotFoundException("User with given id is not found on server!!"+userId) );
	List<Rating> ratingsOfUser=restTemplate.getForObject("http://localhost:8086/api/ratings/users/"+user.getUserId(),List.class);
     logger.info("{}",ratingsOfUser);
//	
//	List<Rating>ratings=Arrays.stream(ratingsOfUser).toList();
//
	List<Rating>ratingList=ratingsOfUser.stream().map(rating -> {
	
	ResponseEntity<Hotel>forEntity=restTemplate.getForEntity("http://localhost:8085/hotels/"+rating.getHotelId(), Hotel.class);

		logger.info("response status code:{}",forEntity.getStatusCode());
	return rating;
	}).collect(Collectors.toList())	;
	
	user.setRatings(ratingsOfUser);
	
	
	return modelMapper.map(user, UserDto.class);
	}

	@Override
	public List<UserDto> getAllUsers() {
		List<User>listUsers=userRepo.findAll();
		List<User>newListUsers=listUsers.stream().map(user->{
			List<Rating> ratingsOfUser=restTemplate.getForObject("http://localhost:8086/api/ratings/users/"+user.getUserId(),List.class);
		     logger.info("{}",ratingsOfUser);
			user.setRatings(ratingsOfUser);
			return user;
		}).collect(Collectors.toList());

		return newListUsers.stream().map(user->modelMapper.map(user, UserDto.class)).collect(Collectors.toList());
	}
	
	
	

}
