package com.lcwd.user.service.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lcwd.user.service.entities.User;
import com.lcwd.user.service.services.UserService;

@RestController
@RequestMapping("/users")
public class UserController {
	
	
	@Autowired
	private UserService userService;
	
	 private Logger logger = LoggerFactory.getLogger(UserController.class);

	
	@PostMapping("/")
	public ResponseEntity<User>createUser(@RequestBody User user){
		          User user1=this.userService.saveUser(user);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(user1);
		
	}
	 @GetMapping("/{userId}")
	 public ResponseEntity<User>getSingleUser(@PathVariable String userId){
		 logger.info("Get Single User Handler: UserController");
		  // logger.info("Retry count: {}", retryCount);
		 User user=this.userService.getUser(userId);
		return ResponseEntity.ok(user);
		
	}
	 public ResponseEntity<User> ratingHotelFallback(String userId, Exception ex) {
     logger.info("Fallback is executed because service is down : ", ex.getMessage());
       User user = User.builder().
    		   email("dummy@gmail.com").
    		   name("Dummy").
    		   about("This user is created dummy because some service is down").
    		   userId("141234").
    		   build();
       return new ResponseEntity<>(user, HttpStatus.OK);
   }

	 
	@GetMapping("/")
	public ResponseEntity<List<User>>getAllUser(){
		List<User>allUser=this.userService.getAllUser();
		return ResponseEntity.ok(allUser);
		
	}
	

}
