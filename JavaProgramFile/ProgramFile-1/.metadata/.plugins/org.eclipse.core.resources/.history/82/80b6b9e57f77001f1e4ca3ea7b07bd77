package com.interthreadcommunication;

class Table {
    public synchronized void printTable(int x) {
        for (int i = 1; i <= 5; i++) {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() + ": " + x * i);
        }
    }
}

class P implements Runnable {
    Table t;

    P(Table t) {
        this.t = t;
    }

    @Override
    public void run() {
        synchronized (t) {
            t.printTable(2);
            t.notify();  // Notify other waiting threads
        }
    }
}

class Q implements Runnable {
    Table t;

    Q(Table t) {
        this.t = t;
    }

    @Override
    public void run() {
        synchronized (t) {
            try {
                t.wait();  // Wait for notification
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            t.printTable(4);
        }
    }
}

public class Test2 {
    public static void main(String[] args) {
        Table t = new Table();  // Shared object

        // Threads
        P p = new P(t);
        Q q = new Q(t);

        Thread t1 = new Thread(p, "First Thread");
        Thread t2 = new Thread(q, "Second Thread");

        t1.start();  // Start thread t1 (which prints table of 2)

        try {
            Thread.sleep(100);  // Give t1 some time to acquire the lock
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        t2.start();  // Start thread t2 (which prints table of 4, after waiting for t1)
    }
}
