package com.interthreadcommunication;

class PrintTable {
    public synchronized void table(int x) {
        for (int i = 1; i <= 6; i++) {
            try {
                Thread.sleep(1000);  // Sleep for 1 second to simulate delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() + ": " + (x * i));
        }
    }
}

class D extends Thread {
    PrintTable t;

    D(PrintTable t) {
        this.t = t;
    }

    @Override
    public void run() {
        synchronized (t) {
            t.table(2);  // Print table of 2
            t.notify();  // Notify the waiting thread (Thread E)
        }
    }
}

class E extends Thread {
    PrintTable t;

    E(PrintTable t) {
        this.t = t;
    }

    @Override
    public void run() {
        synchronized (t) {
            try {
                t.wait();  // Wait for notification from Thread D
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            t.table(4);  // Print table of 4 after being notified
        }
    }
}

class F extends Thread {
    PrintTable t;

    F(PrintTable t) {
        this.t = t;
    }

    @Override
    public void run() {
//        synchronized (t) {
            t.table(6);  // Print table of 6 (no waiting)
       // }
    }
}

class G extends Thread {
    PrintTable t;

    G(PrintTable t) {
        this.t = t;
    }

    @Override
    public void run() {
       // synchronized (t) {
            t.table(8);  // Print table of 8 (no waiting)
       // }
    }
}

public class Test3 {
    public static void main(String[] args) throws InterruptedException {
        PrintTable t = new PrintTable();

        Thread t1 = new Thread(new D(t), "Thread D");
        Thread t2 = new Thread(new E(t), "Thread E");
        Thread t3 = new Thread(new F(t), "Thread F");
        Thread t4 = new Thread(new G(t), "Thread G");

        // Start Thread D and E in sequence with wait/notify
        t1.start();  // Thread D starts first (table of 2)
        t2.start();  // Thread E waits for Thread D to complete

        // Start Thread F and G independently
        t3.start();  // Thread F (table of 6)
        t4.start();  // Thread G (table of 8)

        // Ensure Thread D finishes before Thread E starts
        t1.join();
        t2.join();
    }
}
